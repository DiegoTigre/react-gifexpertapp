{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","setimages","useEffect","then","imgs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"0NAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAyBE,OACI,sBAAMC,SAnBS,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAG3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAYd,SAEA,uBAEAO,KAAK,OACLC,MAAQT,EACRU,SA9BoB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,aAqC7BZ,EAAYe,UAAY,CAEtBd,cAAee,IAAUC,KAAKC,Y,mCC/CnBC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEZC,EAFY,0DAE8CC,UAAUH,GAFxD,sDAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAIhC,OACI,sBAAKc,UAAU,OAAf,UAEI,qBAAKC,IAAOf,EAAKgB,IAAMN,IACvB,4BAAIA,QCLHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,EAA4BlB,mBAAS,IAArC,mBAAO+B,EAAP,KAAeO,EAAf,KAEA,EAA0BtC,mBAAS,GAAnC,6BAYA,OAXAuC,qBAAU,WACPtB,EAAQC,GACDsB,MAAM,SAAAC,GAAI,OAAIH,EAAWG,QACjC,CAACvB,IASC,qCACA,6BAAKA,IAEL,qBAAKgB,UAAY,YAAjB,SAIUH,EAAOJ,KAAK,SAACC,GAAD,OAEV,cAAC,EAAD,eAEIA,GADGA,EAAIC,aC3BlBa,EAAe,WAGzB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAUC,OAEM,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAGD,6BAEQ4C,EAAWhB,KAAI,SAAAT,GAAQ,OAEnB,cAAC,EAAD,CAEAA,SAAaA,GADLA,Y,MCxB/B0B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.1af11767.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n  const [InputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n      setInputValue(e.target.value);\r\n\r\n  }\r\n\r\n  const handleSubmit = (e) =>{\r\n    e.preventDefault();\r\n\r\n    if (InputValue.trim().length > 2 ){\r\n\r\n        // console.log('submit hecho');\r\n        setCategories( cats => [InputValue,...cats ]);\r\n        setInputValue('');\r\n\r\n\r\n    }\r\n    \r\n   \r\n\r\n    \r\n  }\r\n\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n        \r\n        <input \r\n        \r\n        type=\"text\"\r\n        value={ InputValue }\r\n        onChange={handleInputChange}\r\n        \r\n        />\r\n            \r\n            </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n\r\n  setCategories: PropTypes.func.isRequired\r\n\r\n}\r\n","\r\n\r\nexport const getGifs = async(category) => {\r\n\r\n    const  url = `https://api.giphy.com/v1/gifs/search?limit=50&q=${ encodeURI(category)}&api_key=DH1rPSfR880I8R1L9ZeqMEPeQrVgA458`;\r\n    \r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n   }","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title,url} ) => {\r\n\r\n  // console.log({id, title, url});\r\n\r\n    return (\r\n        <div className=\"card\">\r\n       \r\n            <img src = {url} alt ={title} />\r\n            <p>{title}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","//import React from 'react';\r\nimport React,{useState , useEffect} from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const [images, setimages] = useState([]);\r\n\r\n    const [count, setcount] = useState(0)\r\n    useEffect(() => {\r\n       getGifs(category)\r\n             .then( imgs => setimages( imgs ))\r\n    },[category])\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n\r\n        <div className = \"card-grid\">\r\n            \r\n          \r\n              {\r\n                  images.map( (img) => (\r\n\r\n                    <GifGridItem \r\n                    key = {img.id}\r\n                    {...img}\r\n                     />\r\n\r\n                  ))\r\n              }\r\n\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n   \r\n   const [categories, setCategories] = useState(['One Punch']);\r\n\r\n  // const handleAdd = () =>{\r\n    //  setCategories( [...categories, 'Hunter']);\r\n   // setCategories( cats => [...categories, 'Hunter X']);\r\n   \r\n  // }\r\n   \r\n\r\n\r\n    return (\r\n        \r\n          <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories} />\r\n            <hr />\r\n          \r\n       \r\n           <ol>\r\n               {\r\n                   categories.map(category => (\r\n                       \r\n                       <GifGrid \r\n                       key = { category }\r\n                       category = { category }\r\n                       />\r\n                   ))\r\n               }\r\n           </ol>\r\n\r\n         </>   \r\n        \r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n// crear un componente llamado GifExpertApp\n// crear header tipo dos que diga gifespertapp\n// hr\n"],"sourceRoot":""}